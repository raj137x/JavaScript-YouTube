_______________________________________________________________________ Iterable and Iterators _________________________________________________________________________________________________________________________________________________________________________

# Imagine you have a box of colorful candies. Iterating means going through each candy one by one, maybe to count them or sort them by color. In JavaScript, iterating works similarly
 with collections of data.

# Iterables:

* Think of iterables as those candy boxes. They are special types of objects that you can loop through, accessing each item inside them.
* Common iterables in JavaScript include arrays (like your box of candies!), strings (a sequence of letters), maps (collections of key-value pairs), and sets (collections of unique values).

# Iterators:

* An iterator is like a special helper that you get from an iterable. It's kind of like having someone point out each candy in the box, one at a time.
* You don't directly use iterators in for...of loops, but they work behind the scenes. When you use for...of, JavaScript creates an iterator for the iterable object and uses it to access each item.

# Here's the connection:

1. You have an iterable object (the candy box).
2. You use a for...of loop to iterate (go through) the iterable.
3. JavaScript creates an iterator (the helper pointing out candies) for the iterable.
4. In each loop iteration, the iterator "gives" you the next item (candy) from the iterable.

# Key points:

* Iterables are like candy boxes - you can loop through them.
* Iterators are like helpers pointing out each candy in the box.
* for...of loops use iterators behind the scenes to make iterating over collections easy.


__________________________________________________________________________________________________ filter method __________________________________________________________________________________________________________________________________________________________

# Purpose:

* The filter() method is a powerful tool for creating a new array containing only elements from the original array that meet a specific condition.
* It iterates through each element in the original array and applies a test function (called a callback function) to each one.
* If the callback function returns true for an element, that element is included in the new filtered array. Otherwise, it's excluded.

# Key Points:

* The filter() method does not modify the original array. It creates a new array with the filtered elements.
* You can use arrow functions for a concise syntax in the callback function.
* The filter() method is often used in conjunction with other array methods like map and reduce for complex data manipulation tasks.



1. Array Creation:

Javascript:
const myNums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

This line creates a constant variable named myNums and assigns it an array literal. The array literal contains ten integer values from 1 to 10.

2. Filtering the Array:

Javascript:
const newNums = myNums.filter((num) => num > 4);

* filter Method: The filter method is used to create a new array containing only elements from the original 
array that pass a test implemented by the provided function.

* Callback Function: The filter method takes a callback function as an argument. This function is executed for each element of the original array 
(myNums in this case). It receives a single argument, which is the current element (num) being processed.

* Filtering Condition: Inside the callback function, the condition num > 4 is checked. If it evaluates to true (meaning the current element
 num is greater than 4), the element is included in the new array. Otherwise, it's excluded.

 3. Creating the New Array:

* The filter method iterates through each element of myNums and applies the callback function.
* For elements greater than 4 (which are 5, 6, 7, 8, 9, and 10), the callback function returns true, so they are added to the new array.
* The resulting new array is assigned to the constant variable newNums.

4. Printing the Result:

console.log(newNums);

* This line uses the console.log function to print the contents of the newNums array to the console. In this case, it will display:

[5, 6, 7, 8, 9, 10]

The code creates an array, filters it to keep only elements greater than 4, and then stores the filtered elements in a new array. The final result is printed to the console.


______________________________________________________________ map() method __________________________________________________________________________________________________________________________________________________________________________________________________________________________

In JavaScript, the map() method is a powerful tool for working with arrays. It allows you to create a new array by applying a function to each element of the original array. Here's a detailed explanation:

# What it Does:

* map() iterates through each element in an array.
* For each element, it calls a function you provide (the callback function).
* The callback function takes the element (often referred to as num or a similar variable name) as a parameter.
* Inside the callback function, you can manipulate the element in any way you want.
* The return value of the callback function for each element is used to create a new array.

# Key Points:

* New Array: map() creates a new array with the transformed elements. It doesn't modify the original array.

* Callback Function: You define the logic for transforming each element using the callback function. The callback 
function receives the current element, its index (optional), and the original array (optional) as arguments.

* Flexibility: You can perform various operations within the callback function, such as adding values, modifying strings, 
or creating new objects based on the original elements.

# Example:

const myNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const newNums = myNumbers.map( (num) => num + 10 );
console.log(newNums);

# Explanation:

1. const myNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

* This line declares a constant variable named myNumbers and assigns it an array literal containing the numbers 1 to 10.
* The const keyword ensures that the value of myNumbers cannot be changed after it's initialized.

2. const newNums = myNumbers.map( (num) => num + 10 );

* This line creates a new constant variable named newNums.
* It uses the map() method on the myNumbers array.
* The map() method is a higher-order function that iterates over each element in an array and applies a function to it, creating a new array with the results.
* In this case, the arrow function (num) => num + 10 is passed as an argument to map(). This function takes a single parameter num, which represents each number in the myNumbers array.
* Inside the arrow function, the value of num is incremented by 10 using the + operator.

3. console.log(newNums);

* This line uses the console.log() function to print the contents of the newNums array to the browser's developer console or the output window where you're running the code.

# Output: 
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]