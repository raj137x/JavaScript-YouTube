 Control flow in JavaScript refers to the order in which your code gets executed. By default, JavaScript executes code line by line, from top to bottom.
 But what if you want your code to behave differently based on certain conditions, or repeat a block of code multiple times? That's where control flow statements come in.


# These statements allow you to make your code more dynamic and responsive. There are three main types of control flow statements in JavaScript:

1. Conditional statements: These statements, like if, else if, and switch, let your code make decisions based on conditions. If a condition is true, one block of code executes; 
otherwise, another block might execute.

2. Looping statements: These statements, like for, while, and do...while, allow you to repeat a block of code multiple times. This is useful for iterating through data or running 
a task until a certain condition is met.

3. Jump statements: These statements, like break and continue, can abruptly change the flow of control within loops or switch statements. break exits the loop or switch entirely,
 while continue skips to the next iteration of the loop.


By using these control flow statements effectively, you can write JavaScript programs that are more flexible and powerful.



______________________________________________________ OPERATORS ______________________________________________________________________________________________________________________________________


# In JavaScript's conditional statements, you'll primarily encounter two types of operators:

1. Comparison Operators: These operators compare values and return a boolean (true or false) based on the comparison. They are the foundation for evaluating the
 conditions within conditional statements like if, else if, and switch.

Here are some common comparison operators:

== (equal to)
!= (not equal to)
=== (strict equal to - checks value and type)
!== (strict not equal to - checks value and type)
< (less than)
> (greater than)
<= (less than or equal to)
>= (greater than or equal to)

2. Logical Operators: These operators combine boolean expressions (results of comparisons) to form more complex conditions. They are essential for creating scenarios
 where multiple conditions need to be true or false for certain code to execute.

Here are some common logical operators:

&& (AND) - both conditions must be true for the overall condition to be true.
|| (OR) - at least one condition must be true for the overall condition to be true.
! (NOT) - inverts the truth value of a condition (true becomes false, false becomes true).

Example:

let age = 25;
let hasDiscountCard = true;

if (age >= 18 && hasDiscountCard) { // Uses both comparison and logical operators
  console.log("Eligible for discount");
} else {
  console.log("Not eligible for discount");
}

In this example:

* The if statement uses the && (AND) operator to combine two conditions: age >= 18 (comparison) and hasDiscountCard (boolean value).
* Only if both conditions are true (i.e., age is 18 or over and the customer has a discount card) will the code inside the if block execute.
Remember, comparison operators determine if a condition is true or false, while logical operators combine these true/false values to create more intricate conditional statements.



_______________________________________________________ shothand 'if-else' statement _________________________________________________________________________________________________________________


# The shorthand notation for an if-else statement in JavaScript is called the ternary operator. It's a compact way to write a simple conditional expression.

Here's the syntax:

condition ? expression_if_true : expression_if_false

 * condition: This is an expression that evaluates to either true or false.
 * expression_if_true: This expression is executed if the condition is true.
 * expression_if_false: This expression is executed if the condition is false.

# How it Works:

 1. The condition is evaluated.
 2. If the condition is true, the expression_if_true is evaluated and its result becomes the overall result of the ternary operator.
 3. If the condition is false, the expression_if_false is evaluated and its result becomes the overall result of the ternary operator.

 Example:

let age = 25;
let isAdult = age >= 18 ? "You are an adult" : "You are not an adult";

console.log(isAdult); // Output: "You are an adult"